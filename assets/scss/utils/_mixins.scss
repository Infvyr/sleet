@mixin sixteen-by-nine(){
  position: relative;
  height: 0;
  padding-top: 56.25%;
}
@mixin four-by-three(){
  position: relative;
  height: 0;
  padding-top: 75%;
}
@mixin one-by-one(){
  position: relative;
  height: 0;
  padding-top: 100%;
}
@mixin three-by-two(){
  position: relative;
  height: 0;
  padding-top: 66.66%;
}
@mixin image-absolute{
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}
@mixin transition($transition...){
  transition: $transition;
}
@mixin visibility-off(){
  visibility: hidden;
  opacity: 0;
}
@mixin visibility-on(){
  visibility: visible;
  opacity: 1;
}

@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

@mixin screen($size) {
  $desktop: "(min-width: #{$desktop-small})";
  $tablet-down: "(max-width: #{$tablet-landscape})";
  $tablet-up: "(min-width: #{$tablet-small})";
  $tablet: "(min-width: #{$tablet-small}) and (max-width: #{$tablet-landscape})";
  $mobile: "(max-width: #{$smartphone-landscape})";
  $mobile-medium: "(max-width: #{$smartphone-medium})";
  $mobile-small: "(max-width: #{$smartphone-portrait})";

  @if $size == desktop {
    @media only screen and #{$desktop} {
      @content;
    }
  }
  @else if $size == tablet-down {
    @media only screen and #{$tablet-down} {
      @content;
    }
  }
  @else if $size == tablet-up {
    @media #{$tablet-up} {
      @content;
    }
  }
  @else if $size == tablet {
    @media only screen and #{$tablet} {
      @content;
    }
  }
  @else if $size == mobile {
    @media only screen and #{$mobile} {
      @content;
    }
  }
  @else if $size == mobile-medium {
    @media only screen and #{$mobile-medium} {
      @content;
    }
  }
  @else if $size == mobile-small {
    @media #{$mobile-small} {
      @content;
    }
  }
  @else {
    @media only screen and (#{$size}) {
      @content;
    }
  }
}
/* usage:
.wrapper {
  margin: 0 auto;
  width: 100%;
  @include screen('tablet') {
    width: 90%;
  }

  @include screen('desktop') {
    width: 85%;
  }
}
*/

@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}
/* usage:
.logo {
background-image: url("img/logo.png");
  @include retina("img/logo@2x.png", 10rem, 21px);
}
*/

@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'vertical' {
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}
/* usage:
.gradient {
  @include gradient(#07c, #06f, vertical);
}
*/

@mixin font-face($font-name, $font-url, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($font-url + '.eot');
    src: url($font-url + '.eot?#iefix')  format('embedded-opentype'),
    url($font-url + '.woff') format('woff'),
    url($font-url + '.ttf')  format('truetype'),
    url($font-url + '.svg##{$font-url}')  format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin font-face-otf($font-name, $font-url, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($font-url + '.otf') format('opentype');
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
  }
}
// usage: @include font-face("MyFont", "path/to/MyFont", $style: normal, $weight: normal);

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}
// usage: @include center-block

@mixin center-block-vertically-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}
// usage: @include center-vertically

@function getJustify($arg){
  $justify: (
          'sa':space-around,
          'sb':space-between,
          'se':space-evenly,
          'c':center,
          'fs':flex-start,
          'fe':flex-end
  );

  @each $key,$value in $justify{
    @if($key == $arg){
      @return $value;
    }
  }
}

//Get the value for align-items
@function getAlign($arg){
  $align: (
          'b':baseline,
          's':stretch,
          'c':center,
          'fs':flex-start,
          'fe':flex-end
  );

  @each $key,$value in $align{
    @if($key == $arg){
      @return $value;
    }
  }
}

//Display flex
@mixin d-flex{
  display: flex;
  @content
}

/* usage:
div{
  @include d-flex{
    justify-content: getJustify(c);
    align-content: getAlign(c);
  }
}
*/